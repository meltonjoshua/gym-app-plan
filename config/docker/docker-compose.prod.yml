# FitTracker Pro - Production Docker Compose Configuration
version: '3.8'

services:
  # Main Backend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: fittracker-backend
    restart: unless-stopped
    depends_on:
      - mongodb
      - redis
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://mongodb:27017/fittracker_prod
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      RATE_LIMIT_WINDOW: 900000  # 15 minutes
      RATE_LIMIT_MAX: 100
      CORS_ORIGIN: ${CORS_ORIGIN:-https://fittrackerpro.com}
      API_BASE_URL: https://api.fittrackerpro.com
      # Email Configuration
      EMAIL_SERVICE: ${EMAIL_SERVICE}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      # Push Notifications
      FCM_SERVER_KEY: ${FCM_SERVER_KEY}
      APNS_KEY_ID: ${APNS_KEY_ID}
      APNS_TEAM_ID: ${APNS_TEAM_ID}
      # Payment Processing
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      REVENUE_CAT_SECRET: ${REVENUE_CAT_SECRET}
      # External APIs
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      NUTRITIONIX_APP_ID: ${NUTRITIONIX_APP_ID}
      NUTRITIONIX_API_KEY: ${NUTRITIONIX_API_KEY}
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
    volumes:
      - app-uploads:/app/uploads
      - app-logs:/app/logs
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: fittracker-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: fittracker_prod
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - ./backend/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    command: mongod --auth --bind_ip_all --replSet rs0

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: fittracker-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: fittracker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app-uploads:/var/www/uploads:ro
    depends_on:
      - app
    networks:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # MongoDB Backup Service
  mongodb-backup:
    image: mongo:7.0
    container_name: fittracker-backup
    restart: unless-stopped
    environment:
      MONGODB_URI: mongodb://${MONGODB_ROOT_USER}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/fittracker_prod?authSource=admin
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${BACKUP_S3_BUCKET}
    volumes:
      - ./scripts/backup-mongodb.sh:/backup-mongodb.sh:ro
      - backup-data:/backup
    depends_on:
      - mongodb
    networks:
      - backend
    entrypoint: ["/bin/bash", "/backup-mongodb.sh"]

  # Log Aggregation (ELK Stack - Lightweight)
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: fittracker-elasticsearch
    restart: unless-stopped
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      xpack.security.enabled: false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Application Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: fittracker-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'

volumes:
  mongodb-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/fittracker/mongodb
  mongodb-config:
    driver: local
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/fittracker/redis
  app-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/fittracker/uploads
  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/fittracker
  backup-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/fittracker/backups
  elasticsearch-data:
    driver: local
  prometheus-data:
    driver: local

networks:
  backend:
    driver: bridge
    internal: true
  frontend:
    driver: bridge

# Health checks and monitoring
x-healthcheck: &healthcheck
  test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s
