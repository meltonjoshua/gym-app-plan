# FitTracker Pro - Kubernetes Services Configuration
apiVersion: v1
kind: Service
metadata:
  name: fittracker-backend-service
  labels:
    app: fittracker-backend
    component: api-server
spec:
  type: ClusterIP
  selector:
    app: fittracker-backend
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  sessionAffinity: None

---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: fittracker-mongodb-service
  labels:
    app: fittracker-mongodb
    component: database
spec:
  type: ClusterIP
  selector:
    app: fittracker-mongodb
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
    name: mongodb

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: fittracker-redis-service
  labels:
    app: fittracker-redis
    component: cache
spec:
  type: ClusterIP
  selector:
    app: fittracker-redis
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis

---
# Load Balancer Service (for external access)
apiVersion: v1
kind: Service
metadata:
  name: fittracker-backend-lb
  labels:
    app: fittracker-backend
    component: load-balancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "${AWS_SSL_CERT_ARN}"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy: "ELBSecurityPolicy-TLS-1-2-2017-01"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "60"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/api/health"
spec:
  type: LoadBalancer
  selector:
    app: fittracker-backend
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 443
    targetPort: 3000
    protocol: TCP
    name: https
  loadBalancerSourceRanges:
  - 0.0.0.0/0

---
# Ingress Configuration (Alternative to LoadBalancer)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fittracker-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  tls:
  - hosts:
    - api.fittrackerpro.com
    - ws.fittrackerpro.com
    secretName: fittracker-tls
  rules:
  - host: api.fittrackerpro.com
    http:
      paths:
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: fittracker-backend-service
            port:
              number: 80
  - host: ws.fittrackerpro.com
    http:
      paths:
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: fittracker-backend-service
            port:
              number: 80

---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fittracker-network-policy
spec:
  podSelector:
    matchLabels:
      app: fittracker-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: nginx-ingress
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  - from: []  # Allow all ingress traffic (modify as needed)
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: fittracker-mongodb
    ports:
    - protocol: TCP
      port: 27017
  - to:
    - podSelector:
        matchLabels:
          app: fittracker-redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow all external egress (for APIs, etc.)
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53  # DNS

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: fittracker-backend-monitor
  labels:
    app: fittracker-backend
    release: prometheus
spec:
  selector:
    matchLabels:
      app: fittracker-backend
  endpoints:
  - port: http
    path: /api/metrics
    interval: 30s
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - default
